{"version":3,"sources":["redux/actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/ContactList/ContactListItem.js","components/Container/Container.js","components/Filter/Filter.js","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","ContactsForm","initialState","state","nameInputId","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","items","some","contact","alert","onSubmit","reset","this","className","htmlFor","type","pattern","title","required","onChange","lassName","Component","PropsType","func","isRequired","connect","contacts","dispatch","contactsActions","ContactsList","children","prototype","PropTypes","node","ContactItem","onDeleteContact","map","onClick","arrayOf","shape","string","findContact","allContacts","filter","normalizedFilter","toLowerCase","includes","Container","target","App","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devToolss","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.1757a505.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\nimport { createAction } from \"@reduxjs/toolkit\";\nimport shortid from \"shortid\";\n\nconst addContact = createAction(\"contacts/addContact\", ({ name, number }) => {\n  return {\n    payload: {\n      id: shortid.generate(),\n      name,\n      number,\n    },\n  };\n});\n\nconst deleteContact = createAction(\"contacts/delContact\");\n\nconst changeFilter = createAction(\"contacts/filterContact\");\n\nexport default { addContact, deleteContact, changeFilter };\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport contactsActions from \"../../redux/actions\";\nimport PropsType from \"prop-types\";\nimport shortid from \"shortid\";\nimport \"./Form.css\";\n\nclass ContactsForm extends Component {\n  initialState = {\n    name: \"\",\n    number: \"\",\n  };\n\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  nameInputId = shortid.generate();\n  numberInputId = shortid.generate();\n\n  handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const hasContacts = (contact) =>\n      contact.name === this.state.name || contact.number === this.state.number;\n\n    if (this.props.items.some(hasContacts)) {\n      alert(`Contact is already in contacts`);\n      return;\n    }\n\n    this.props.onSubmit({ ...this.state });\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState(this.initialState);\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form className=\"Form\" onSubmit={this.handleSubmit}>\n        <label className=\"Form__label\" htmlFor={this.nameInputId}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={this.handleChange}\n            id={this.nameInputId}\n          />\n        </label>\n        <label lassName=\"Form__label\" htmlFor={this.numberInputId}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={this.handleChange}\n            id={this.numberInputId}\n          />\n        </label>\n        <br />\n        <button className=\"btn\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactsForm.PropsType = {\n  onSubmit: PropsType.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  items: state.contacts.items,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(contactsActions.addContact({ name, number })),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsForm);\n","import PropTypes from 'prop-types';\n\nconst ContactsList = ({ children }) => (\n  <ul>\n    {children}\n    </ul>\n);\n\nContactsList.prototype = {\n  children: PropTypes.node,\n};\n\nexport default ContactsList;","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport contactsActions from \"../../redux/actions\";\nimport \"./ContactsList.css\";\n\nconst ContactItem = ({ onDeleteContact, contacts }) => (\n  <>\n    {contacts.map(({ id, name, number }) => {\n      return (\n        <li className=\"Contacts__item\" key={id}>\n          {name}: {number}\n          <button\n            className=\"Contacts__btn\"\n            type=\"submit\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      );\n    })}\n  </>\n);\n\nContactItem.prototype = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  onDeleteContact: PropTypes.func,\n};\n\nconst findContact = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  if (filter) {\n    return allContacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n  return allContacts;\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: findContact(items, filter),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDeleteContact: (id) => dispatch(contactsActions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactItem);\n","import \"./Container.css\";\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport contactsActions from \"../../redux/actions\";\nimport \"./Filter.css\";\n\nconst Filter = ({ value, onChange }) => (\n  <>\n    <h3 className=\"Filter__title\">Find contacts by name</h3>\n    <input\n      className=\"Filter__input\"\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      onChange={onChange}\n    />\n  </>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (event) =>\n    dispatch(contactsActions.changeFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\n// import { connect } from 'react-redux';\nimport ContactsForm from './components/ContactForm';\nimport ContactsList from './components/ContactList/ContactList.js';\nimport ContactsListItem from './components/ContactList/ContactListItem.js';\nimport Container from './components/Container';\nimport Filter from './components/Filter/Filter';\n\n\nclass App extends Component {\n  // state = {\n  //   contacts: [\n  //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //   ],\n  //   filter: '',\n  // };\n\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  // handleChange = event => {\n  //   const { name, value } = event.currentTarget;\n  //   this.setState({ [name]: value });\n  // };\n\n  // addContact = contact => {\n  //   if (!this.hasContacts(contact.name)) {\n  //     this.setState(({ contacts }) => ({\n  //       contacts: [contact, ...contacts],\n  //     }));\n  //   } else {\n  //     alert(`${contact.name} is already in contacts`);\n  //   }\n  // };\n\n  // hasContacts = name => {\n  //   return this.state.contacts.find(contact => {\n  //     return contact.name.toLocaleLowerCase() === name.toLocaleLowerCase();\n  //   });\n  // };\n\n  // findContact = () => {\n  //   const { filter, contacts } = this.state;\n  //   const normalizedFilter = filter.toLocaleLowerCase();\n\n  //   if (filter.length) {\n  //     return contacts.filter(contact =>\n  //       contact.name.toLowerCase().includes(normalizedFilter),\n  //     );\n  //   } else {\n  //     return contacts;\n  //   }\n  // };\n\n  // deleteContact = contactId => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n  //   }));\n  // };\n\n  render() {\n    return (\n      <Container>\n        <h1>PhoneBook</h1>\n        <ContactsForm />\n        <div>\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactsList>\n            <ContactsListItem />\n          </ContactsList>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;","import { createReducer } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport actions from \"./actions\";\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ items, filter });\n","/* eslint-disable import/no-anonymous-default-export */\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport contactsReducer from \"./reducer\";\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: \"contacts\",\n  storage,\n  blacklist: [\"filter\"],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devToolss: process.env.NODE_ENV === \"development\",\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"../src/redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}