{"version":3,"sources":["redux/actions.js","redux/operations.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/ContactList/ContactListItem.js","components/Container/Container.js","components/Filter/Filter.js","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","changeFilter","axios","defaults","baseURL","name","number","dispatch","contacts","completed","post","then","data","catch","error","id","delete","ContactsForm","initialState","state","nameInputId","shortid","generate","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","items","some","contact","alert","onSubmit","reset","this","className","htmlFor","type","pattern","title","required","onChange","lassName","Component","PropsType","func","isRequired","connect","contactsOperations","ContactsList","children","prototype","PropTypes","node","ContactItem","onDeleteContact","map","onClick","arrayOf","shape","string","findContact","allContacts","filter","normalizedFilter","toLowerCase","includes","Container","contactsActions","target","App","createReducer","_","payload","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devToolss","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98bb8d5e.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\nimport { createAction } from \"@reduxjs/toolkit\";\n// import shortid from \"shortid\";\n\nexport const fetchContactsRequest = createAction(\n  \"contacts/fetchContactsRequest\"\n);\nexport const fetchContactsSuccess = createAction(\n  \"contacts/fetchContactsSuccess\"\n);\nexport const fetchContactsError = createAction(\"contacts/fetchContactsError\");\n\nexport const addContactsRequest = createAction(\"contacts/addContactsRequest\");\nexport const addContactsSuccess = createAction(\"contacts/addContactsSuccess\");\nexport const addContactsError = createAction(\"contacts/addContactsError\");\n\nexport const deleteContactsRequest = createAction(\n  \"contacts/deleteContactsRequest\"\n);\nexport const deleteContactsSuccess = createAction(\n  \"contacts/deleteContactsSuccess\"\n);\nexport const deleteContactsError = createAction(\"contacts/deleteContactsError\");\n\nexport const changeFilter = createAction(\"contacts/changeFilter\");\n\n// const changeFilter = createAction(\"contacts/filterContact\");\n\n// export default {\n//   fetchContactsRequest,\n//   fetchContactsSuccess,\n//   fetchContactsError,\n//   addContactsRequest,\n//   addContactsSuccess,\n//   addContactsError,\n//   deleteContactsRequest,\n//   deleteContactsSuccess,\n//   deleteContactsError,\n//   // addContact,\n//   // deleteContact,\n//   changeFilter,\n// };\n","/* eslint import/no-anonymous-default-export: [2, {\"allowObject\": true}] */\r\nimport axios from \"axios\";\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccess,\r\n  deleteContactsError,\r\n} from \"./actions\";\r\n\r\naxios.defaults.baseURL =\r\n  \"https://619aab5727827600174452e9.mockapi.io/contacts/\";\r\n\r\nconst fetchContacts = () => (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch((error) => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = (name, number) => (dispatch) => {\r\n  const contacts = { name, number, completed: false };\r\n\r\n  dispatch(addContactsRequest());\r\n  axios\r\n    .post(\"/contacts\", contacts)\r\n    .then(({ data }) => dispatch(addContactsSuccess(data)))\r\n    .catch((error) => dispatch(addContactsError(error)));\r\n};\r\n\r\nconst deleteContact = (id) => (dispatch) => {\r\n  dispatch(deleteContactsRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactsSuccess(id)))\r\n    .catch((error) => dispatch(deleteContactsError(error)));\r\n};\r\n\r\nexport default { fetchContacts, addContact, deleteContact };\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport contactsOperations from \"../../redux/operations\";\nimport PropsType from \"prop-types\";\nimport shortid from \"shortid\";\nimport \"./Form.css\";\n\nclass ContactsForm extends Component {\n  initialState = {\n    name: \"\",\n    number: \"\",\n  };\n\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  nameInputId = shortid.generate();\n  numberInputId = shortid.generate();\n\n  handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const hasContacts = (contact) =>\n      contact.name === this.state.name || contact.number === this.state.number;\n\n    if (this.props.items.some(hasContacts)) {\n      alert(`Contact is already in contacts`);\n      return;\n    }\n\n    this.props.onSubmit({ ...this.state });\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState(this.initialState);\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form className=\"Form\" onSubmit={this.handleSubmit}>\n        <label className=\"Form__label\" htmlFor={this.nameInputId}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={this.handleChange}\n            id={this.nameInputId}\n          />\n        </label>\n        <label lassName=\"Form__label\" htmlFor={this.numberInputId}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={this.handleChange}\n            id={this.numberInputId}\n          />\n        </label>\n        <br />\n        <button className=\"btn\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactsForm.PropsType = {\n  onSubmit: PropsType.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  items: state.contacts.items,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(contactsOperations.addContact({ name, number })),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsForm);\n","import PropTypes from 'prop-types';\n\nconst ContactsList = ({ children }) => (\n  <ul>\n    {children}\n    </ul>\n);\n\nContactsList.prototype = {\n  children: PropTypes.node,\n};\n\nexport default ContactsList;","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport contactsOperations from \"../../redux/operations\";\nimport \"./ContactsList.css\";\n\nconst ContactItem = ({ onDeleteContact, contacts }) => (\n  <>\n    {contacts.map(({ id, name, number }) => {\n      return (\n        <li className=\"Contacts__item\" key={id}>\n          {name}: {number}\n          <button\n            className=\"Contacts__btn\"\n            type=\"submit\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      );\n    })}\n  </>\n);\n\nContactItem.prototype = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  onDeleteContact: PropTypes.func,\n};\n\nconst findContact = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  if (filter) {\n    return allContacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n  return allContacts;\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: findContact(items, filter),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDeleteContact: (id) => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactItem);\n","import \"./Container.css\";\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as contactsActions from \"../../redux/actions\";\nimport \"./Filter.css\";\n\nconst Filter = ({ value, onChange }) => (\n  <>\n    <h3 className=\"Filter__title\">Find contacts by name</h3>\n    <input\n      className=\"Filter__input\"\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      onChange={onChange}\n    />\n  </>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (event) =>\n    dispatch(contactsActions.changeFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\n// import { connect } from 'react-redux';\nimport ContactsForm from './components/ContactForm';\nimport ContactsList from './components/ContactList/ContactList.js';\nimport ContactsListItem from './components/ContactList/ContactListItem.js';\nimport Container from './components/Container';\nimport Filter from './components/Filter/Filter';\n\n\nclass App extends Component {\n  // state = {\n  //   contacts: [\n  //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //   ],\n  //   filter: '',\n  // };\n\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  // handleChange = event => {\n  //   const { name, value } = event.currentTarget;\n  //   this.setState({ [name]: value });\n  // };\n\n  // addContact = contact => {\n  //   if (!this.hasContacts(contact.name)) {\n  //     this.setState(({ contacts }) => ({\n  //       contacts: [contact, ...contacts],\n  //     }));\n  //   } else {\n  //     alert(`${contact.name} is already in contacts`);\n  //   }\n  // };\n\n  // hasContacts = name => {\n  //   return this.state.contacts.find(contact => {\n  //     return contact.name.toLocaleLowerCase() === name.toLocaleLowerCase();\n  //   });\n  // };\n\n  // findContact = () => {\n  //   const { filter, contacts } = this.state;\n  //   const normalizedFilter = filter.toLocaleLowerCase();\n\n  //   if (filter.length) {\n  //     return contacts.filter(contact =>\n  //       contact.name.toLowerCase().includes(normalizedFilter),\n  //     );\n  //   } else {\n  //     return contacts;\n  //   }\n  // };\n\n  // deleteContact = contactId => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n  //   }));\n  // };\n\n  render() {\n    return (\n      <Container>\n        <h1>PhoneBook</h1>\n        <ContactsForm />\n        <div>\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactsList>\n            <ContactsListItem />\n          </ContactsList>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;","import { createReducer } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  deleteContactsError,\n  changeFilter,\n} from \"./actions\";\n\nconst initState = [\n  { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n  { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n  { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n  { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n];\n\nconst items = createReducer(initState, {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactsSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactsSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [addContactsRequest]: () => true,\n  [addContactsSuccess]: () => false,\n  [addContactsError]: () => false,\n  [deleteContactsRequest]: () => true,\n  [deleteContactsSuccess]: () => false,\n  [deleteContactsError]: () => false,\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n});\n\nconst filter = createReducer(\"\", {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ items, filter, loading });\n","/* eslint-disable import/no-anonymous-default-export */\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\n\nimport contactsReducer from \"./reducer\";\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n// const contactsPersistConfig = {\n//   key: \"contacts\",\n//   storage,\n//   blacklist: [\"filter\"],\n// };\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devToolss: process.env.NODE_ENV === \"development\",\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"../src/redux/store\";\n// import { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}