{"version":3,"sources":["redux/actions.js","redux/operations.js","redux/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactListItem.js","components/Container/Container.js","components/Filter/Filter.js","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","changeFilter","axios","defaults","baseURL","name","number","dispatch","contacts","completed","post","then","data","catch","error","id","delete","getContacts","state","items","getFilter","filter","findContact","contact","toLowerCase","includes","ContactsForm","initialState","nameInputId","shortid","generate","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","some","alert","onSubmit","reset","this","className","htmlFor","type","pattern","title","required","onChange","lassName","Component","PropsType","func","isRequired","connect","contactsOperations","ContactItem","onDeleteContact","map","onClick","prototype","PropTypes","arrayOf","shape","string","Container","children","contactsActions","target","App","createReducer","_","payload","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devToolss","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7233dd3.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\nimport { createAction } from \"@reduxjs/toolkit\";\n// import shortid from \"shortid\";\n\nexport const fetchContactsRequest = createAction(\n  \"contacts/fetchContactsRequest\"\n);\nexport const fetchContactsSuccess = createAction(\n  \"contacts/fetchContactsSuccess\"\n);\nexport const fetchContactsError = createAction(\"contacts/fetchContactsError\");\n\nexport const addContactsRequest = createAction(\"contacts/addContactsRequest\");\nexport const addContactsSuccess = createAction(\"contacts/addContactsSuccess\");\nexport const addContactsError = createAction(\"contacts/addContactsError\");\n\nexport const deleteContactsRequest = createAction(\n  \"contacts/deleteContactsRequest\"\n);\nexport const deleteContactsSuccess = createAction(\n  \"contacts/deleteContactsSuccess\"\n);\nexport const deleteContactsError = createAction(\"contacts/deleteContactsError\");\n\nexport const changeFilter = createAction(\"contacts/changeFilter\");\n\n// const changeFilter = createAction(\"contacts/filterContact\");\n\n// export default {\n//   fetchContactsRequest,\n//   fetchContactsSuccess,\n//   fetchContactsError,\n//   addContactsRequest,\n//   addContactsSuccess,\n//   addContactsError,\n//   deleteContactsRequest,\n//   deleteContactsSuccess,\n//   deleteContactsError,\n//   // addContact,\n//   // deleteContact,\n//   changeFilter,\n// };\n","/* eslint import/no-anonymous-default-export: [2, {\"allowObject\": true}] */\r\nimport axios from 'axios';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccess,\r\n  deleteContactsError,\r\n} from './actions';\r\n\r\naxios.defaults.baseURL =\r\n  'https://619aab5727827600174452e9.mockapi.io/contacts/';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  axios\r\n    .get(`/contacts`)\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact =\r\n  ({ name, number }) =>\r\n  dispatch => {\r\n    const contacts = { name, number, completed: false };\r\n\r\n    dispatch(addContactsRequest());\r\n    axios\r\n      .post('/contacts', contacts)\r\n      .then(({ data }) => dispatch(addContactsSuccess(data)))\r\n      .catch(error => dispatch(addContactsError(error)));\r\n  };\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteContactsRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactsSuccess(id)))\r\n    .catch(error => dispatch(deleteContactsError(error)));\r\n};\r\n\r\nexport default { fetchContacts, addContact, deleteContact };\r\n","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const findContact = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  // const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n};\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/operations';\nimport PropsType from 'prop-types';\nimport { getContacts } from '../../redux/selectors';\nimport shortid from 'shortid';\nimport './Form.css';\n\nclass ContactsForm extends Component {\n  initialState = {\n    name: '',\n    number: '',\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = shortid.generate();\n  numberInputId = shortid.generate();\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const hasContacts = contact =>\n      contact.name === this.state.name || contact.number === this.state.number;\n\n    if (this.props.items.some(hasContacts)) {\n      alert(`Contact is already in contacts`);\n      return;\n    }\n\n    this.props.onSubmit({ ...this.state });\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState(this.initialState);\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form className=\"Form\" onSubmit={this.handleSubmit}>\n        <label className=\"Form__label\" htmlFor={this.nameInputId}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={this.handleChange}\n            id={this.nameInputId}\n          />\n        </label>\n        <label lassName=\"Form__label\" htmlFor={this.numberInputId}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={this.handleChange}\n            id={this.numberInputId}\n          />\n        </label>\n        <br />\n        <button className=\"btn\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactsForm.PropsType = {\n  onSubmit: PropsType.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  items: getContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(contactsOperations.addContact({ name, number })),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsForm);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/operations';\nimport { findContact } from '../../redux/selectors';\nimport './ContactsList.css';\n\nconst ContactItem = ({ onDeleteContact, contacts }) => (\n  <>\n    {contacts.map(({ id, name, number }) => {\n      return (\n        <ul>\n          <li className=\"Contacts__item\" key={id}>\n            {name}: {number}\n            <button\n              className=\"Contacts__btn\"\n              type=\"submit\"\n              onClick={() => onDeleteContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        </ul>\n      );\n    })}\n  </>\n);\n\nContactItem.prototype = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  contacts: findContact(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactItem);\n","import \"./Container.css\";\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/actions';\nimport { getFilter } from '../../redux/selectors';\nimport './Filter.css';\n\nconst Filter = ({ value, onChange }) => (\n  <>\n    <h3 className=\"Filter__title\">Find contacts by name</h3>\n    <input\n      className=\"Filter__input\"\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      onChange={onChange}\n    />\n  </>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: event => dispatch(contactsActions.changeFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from \"react\";\n// import { connect } from 'react-redux';\nimport ContactsForm from \"./components/ContactForm\";\n// import ContactsList from \"./components/ContactList/ContactList.js\";\nimport ContactsListItem from \"./components/ContactList/ContactListItem.js\";\nimport Container from \"./components/Container\";\nimport Filter from \"./components/Filter/Filter\";\n\nclass App extends Component {\n  // state = {\n  //   contacts: [\n  //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //   ],\n  //   filter: '',\n  // };\n\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  // handleChange = event => {\n  //   const { name, value } = event.currentTarget;\n  //   this.setState({ [name]: value });\n  // };\n\n  // addContact = contact => {\n  //   if (!this.hasContacts(contact.name)) {\n  //     this.setState(({ contacts }) => ({\n  //       contacts: [contact, ...contacts],\n  //     }));\n  //   } else {\n  //     alert(`${contact.name} is already in contacts`);\n  //   }\n  // };\n\n  // hasContacts = name => {\n  //   return this.state.contacts.find(contact => {\n  //     return contact.name.toLocaleLowerCase() === name.toLocaleLowerCase();\n  //   });\n  // };\n\n  // findContact = () => {\n  //   const { filter, contacts } = this.state;\n  //   const normalizedFilter = filter.toLocaleLowerCase();\n\n  //   if (filter.length) {\n  //     return contacts.filter(contact =>\n  //       contact.name.toLowerCase().includes(normalizedFilter),\n  //     );\n  //   } else {\n  //     return contacts;\n  //   }\n  // };\n\n  // deleteContact = contactId => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n  //   }));\n  // };\n\n  render() {\n    return (\n      <Container>\n        <h1>PhoneBook</h1>\n        <ContactsForm />\n        <div>\n          <h2>Contacts</h2>\n          <Filter />\n          {/* <ContactsList> */}\n          <ContactsListItem />\n          {/* </ContactsList> */}\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  deleteContactsError,\n  changeFilter,\n} from './actions';\n\n// const initState = [\n//   { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n//   { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n//   { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n//   { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n// ];\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactsSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactsSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [addContactsRequest]: () => true,\n  [addContactsSuccess]: () => false,\n  [addContactsError]: () => false,\n  [deleteContactsRequest]: () => true,\n  [deleteContactsSuccess]: () => false,\n  [deleteContactsError]: () => false,\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ items, filter, loading });\n","/* eslint-disable import/no-anonymous-default-export */\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\n\nimport contactsReducer from \"./reducer\";\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n// const contactsPersistConfig = {\n//   key: \"contacts\",\n//   storage,\n//   blacklist: [\"filter\"],\n// };\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devToolss: process.env.NODE_ENV === \"development\",\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"../src/redux/store\";\n// import { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}